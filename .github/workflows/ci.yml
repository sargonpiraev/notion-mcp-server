name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_OPTIONS: '--max-old-space-size=4096'

jobs:
  install:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false

      - name: Cache node_modules
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

  test:
    runs-on: ubuntu-latest
    needs: install
    permissions:
      contents: read
      checks: write
      pull-requests: write
    strategy:
      matrix:
        test-type: [unit, lint, format, typecheck, build, audit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: npm run test

      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/cobertura-coverage.xml
          flags: unittests

      - name: Upload test results
        if: matrix.test-type == 'unit'
        uses: dorny/test-reporter@v1
        with:
          name: Jest Tests
          path: junit.xml
          reporter: jest-junit

      - name: Run linting
        if: matrix.test-type == 'lint'
        run: npm run lint

      - name: Check code formatting
        if: matrix.test-type == 'format'
        run: npm run format:check

      - name: Type checking
        if: matrix.test-type == 'typecheck'
        run: npm run typecheck

      - name: Test build
        if: matrix.test-type == 'build'
        run: npm run build

      - name: Security audit
        if: matrix.test-type == 'audit'
        run: npm run audit
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [install, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: [install, test, build]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --progress=false

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: build/

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npx semantic-release
